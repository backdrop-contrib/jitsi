<?php
  
/**
 * Implements hook_field_info().
 *
 */
function jitsi_field_info() {
  return array(
    'jitsi' => array(
      'label' => t('Jitsi Meet'),
      'description' => t('This field allows you to insert a Jitsi Meet video conference into your content.'),
      'instance_settings' => array(
        'add_jitsi' => 0,
      ),
      'default_widget' => 'jitsi_meet',
      'default_formatter' => 'jitsi_default',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 */
function jitsi_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  if ($field['type'] == 'jitsi') {
    // Validate functions here.
  }
}

function jitsi_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  $field = $form['#field'];
  
  if ($field['type'] == 'jitsi') {
    $form['field']['cardinality_container']['#disabled'] = TRUE;
    $form['field']['cardinality_container']['#description'] = t('We can insert a maximum of one Jitsi Meet conference currently.');
  }
}

/**
 * Implements hook_field_is_empty().
 *
 */
function jitsi_field_is_empty($item, $field) {
  if ($field['type'] == 'jitsi') {
    if (empty($item['add_jitsi'])) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implements hook_widget_info().
 *
 */
function jitsi_field_widget_info() {
  return array(
    'jitsi_meet' => array(
      'label' => t('Jitsi Meet'),
      'description' => t('Add a Jitsi Meet video conference.'),
      'field types' => array('jitsi'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 */
function jitsi_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;
  if ($instance['widget']['type'] == 'jitsi_meet') {
    $element['add_jitsi'] = array(
      '#type' => 'checkbox',
      '#title' => t('Add a Jitsi Meet video conference'),
    ) + $base;
    
    // TODO: Further widget options here. Alternate host? Password? Other Jitsi options?
    /*
    $element['page_type'] = array(
      '#type' => 'select',
      '#title' => t('CiviCRM Page Type'),
      '#default_value' => isset($items[$delta]['page_type']) ? $items[$delta]['page_type'] : NULL,
      '#options' => jitsi_pagetype(),
    ) + $base;
    $element['contribution_page'] = array(
      '#type' => 'select',
      '#title' => t('Contribution Page'),
      '#default_value' => isset($items[$delta]['contribution_page']) ? $items[$delta]['contribution_page'] : NULL,
      '#options' => jitsi_contribution_page_options(),
      '#states' => array(
        'visible' => array(
          'select[name="'. $states_prefix . '[page_type]"]' => array('value' => 'civicrm/contribute/transact'),
        ),
      ),
    ) + $base;
    $element['event_page'] = array(
      '#type' => 'select',
      '#title' => t('Event Registration Page'),
      '#default_value' => isset($items[$delta]['event_page']) ? $items[$delta]['event_page'] : NULL,
      '#options' => jitsi_event_page_options(),
      '#states' => array(
        'visible' => array(
          'select[name="'. $states_prefix . '[page_type]"]' => array('value' => 'civicrm/event/register'),
        ),
      ),
    ) + $base;
    */
  }

  return $element;
}

/**
 * Implements hook_field_formatter_info().
 *
 */
function jitsi_field_formatter_info() {
  return array(
    'jitsi_default' => array(
      'label' => t('Embedded video'),
      'field types' => array('jitsi'),
    ),
    'jitsi_link' => array(
      'label' => t('Button linked to page'),
      'field types' => array('jitsi'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 */
function jitsi_field_formatter_view($obj_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  $output = "No jitsi";

  switch ($display['type']) {
    case 'jitsi_link':
      // Button linked to Jitsi Meet page.
      foreach ($items as $delta => $item) {
        if ($item['add_jitsi']) {
          $output = "Add jitsi link";
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
      
    case 'jitsi_default':
    default:
      foreach ($items as $delta => $item) {
        if ($item['add_jitsi']) {
          backdrop_add_js('https://meet.jit.si/external_api.js', array(
            'type' => 'external',
            'scope' => 'footer',
            'weight' => 10,
            )
          );
          $output = '<div id="meet"></div>';
          backdrop_add_js("
            const domain = 'meet.jit.si';
            const options = {
                roomName: 'JitsiMeetAPIExample_new',
                width: '100%',
                height: 700,
                noSSL: false,
                configOverwrite: {
                  enableUserRolesBasedOnToken: true,
                  enableWelcomePage: false,
                  },
                interfaceConfigOverwrite: {
                  TOOLBAR_BUTTONS: [
                          'microphone', 'camera', 'closedcaptions', 'desktop', 'fullscreen',
                          'fodeviceselection', 'hangup', 'profile', 'info', 'chat', 'recording',
                          'livestreaming', 'etherpad', 'sharedvideo', 'settings', 'raisehand',
                          'videoquality', 'filmstrip', 'invite', 'feedback', 'stats', 'shortcuts',
                          'tileview', 'videobackgroundblur', 'download', 'help', 'mute-everyone',
                          'e2ee'
                      ],
                  SHOW_PROMOTIONAL_CLOSE_PAGE: false,
                  DEFAULT_LOCAL_DISPLAY_NAME: 'self',
                  },
                parentNode: document.querySelector('#meet')
            };
            const api = new JitsiMeetExternalAPI(domain, options);
            api.executeCommand('password', 'securepassword!');
            api.executeCommand('subject', backdrop_get_title());
          ", array(
            'type' => 'inline',
            'scope' => 'footer',
            'weight' => 15,
            )
          );
        }
        $element[$delta] = array('#markup' => $output);
      }
      break;
  }

  return $element;
}
